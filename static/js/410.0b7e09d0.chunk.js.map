{"version":3,"file":"static/js/410.0b7e09d0.chunk.js","mappings":"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","sources":["components/Loader/toastConfig.js","webpack://react-homework-template/./src/components/MoviesNetItem/MoviesNetItem.module.css?1398","components/MoviesNetItem/MoviesNetItem.js","webpack://react-homework-template/./src/components/MoviesNet/MoviesNet.module.css?7565","components/MoviesNet/MoviesNet.js","pages/SearchPage.jsx","services/api/api.js","webpack://react-homework-template/./src/pages/Pages.module.css?6bb4"],"sourcesContent":["export const toastConfig = {\n    position: 'top-center',\n    autoClose: 2000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n    progress: undefined,\n    theme: 'colored',\n  };","// extracted by mini-css-extract-plugin\nexport default {\"MoviesNetItem\":\"MoviesNetItem_MoviesNetItem__RcVDF\"};","import React from 'react';\nimport styles from './MoviesNetItem.module.css';\nimport { Link, useLocation } from 'react-router-dom';\n\nimport placeholder from '../../images/cinema.png';\n\nconst MoviesNetItem = ({ title, poster, year, movieId }) => {\n  const location = useLocation();\n\n  return (\n    <li className={styles.MoviesNetItem}>\n      <Link to={`/movies/${movieId}`}>\n      <img\n       state={{ from: location }}\n       src={poster ? `https://image.tmdb.org/t/p/w200/${poster}` : placeholder}\n        alt={title}\n        width=\"275\"\n      />\n      <h3>{title}</h3>\n      <p>Year: {year}</p>\n      </Link>\n    </li>\n  );\n};\n\nexport default MoviesNetItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"MoviesNetList\":\"MoviesNet_MoviesNetList__RlGIx\"};","import React from 'react';\nimport MoviesNetItem from '../MoviesNetItem/MoviesNetItem';\nimport styles from './MoviesNet.module.css';\n\nconst MoviesNet = ({ dayMovies }) => {\n  return (\n    <ul className={styles.MoviesNetList}>\n      {dayMovies.map(movie => (\n        <MoviesNetItem\n          key={movie.id}\n          movieId={movie.id}\n          title={movie.title ? movie.title : movie.name}\n          poster={movie.poster_path}\n          year={movie.first_air_date ? movie.first_air_date : movie.release_date}\n        />\n      ))}\n    </ul>\n  );\n};\n\nexport default MoviesNet;\n","import React, { useEffect, useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { toastConfig } from '../components/Loader/toastConfig';\nimport { useSearchParams } from 'react-router-dom';\nimport { Dna } from 'react-loader-spinner';\n\nimport 'react-toastify/dist/ReactToastify.css';\nimport styles from './Pages.module.css';\n\nimport { fetchSearchedMovie } from 'services/api/api';\nimport MoviesNet from '../components/MoviesNet/MoviesNet';\n\nconst SearchPage = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const searchMovie = searchParams.get('query');\n\n  const [searchMovies, setSearchMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    if (!searchMovie) return;\n\n    const fetchPostsData = async () => {\n      try {\n        setIsLoading(true);\n\n        const movies = await fetchSearchedMovie(searchMovie);\n\n        console.log(movies);\n\n        setSearchMovies(movies);\n\n        if (movies.length > 0) {\n          setSearchMovies(movies);\n          toast.success(\n            `Your movies \"${searchMovie}\" were successfully fetched!`,\n            toastConfig\n          );\n        } else {\n          setSearchMovies([]);\n          toast.error(`Movies not found for \"${searchMovie}\"`, toastConfig);\n        }\n      } catch (error) {\n        setError(error.message);\n        toast.error(error.message, toastConfig);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchPostsData();\n  }, [searchMovie]);\n\n  const handleSumbit = event => {\n    event.preventDefault();\n    const searchValue = event.target.searchMovie.value.trim().toLowerCase();\n\n    setSearchParams({\n      query: searchValue,\n    });\n  };\n\n  return (\n    <div>\n      <div className={styles.formWrap}>\n        <form className={styles.searchBox} onSubmit={handleSumbit}>\n          <input\n            name=\"searchMovie\"\n            type=\"text\"\n            autoComplete=\"off\"\n            autoFocus\n            placeholder=\"Search movie..\"\n            required\n          />\n          <button type=\"submit\" className={styles.searchBtn}>\n            <span className={styles.SearchFormLabel}>Search</span>\n          </button>\n        </form>\n      </div>\n\n      {error !== null && (\n        <p>\n          Oops, some error occurred! Please, try again later. Error: {error}\n        </p>\n      )}\n      {isLoading && (\n        <Dna\n          visible={true}\n          height={80}\n          width={80}\n          ariaLabel=\"dna-loading\"\n          wrapperStyle={{}}\n          wrapperClassName=\"dna-wrapper\"\n        />\n      )}\n\n      {searchMovies.length > 0 && <MoviesNet dayMovies={searchMovies} />}\n      {searchMovies.length === 0 && searchMovie && (\n        <div className={styles.formWrap}>Ooops! No movies found!</div>\n      )}\n    </div>\n  );\n};\n\nexport default SearchPage;\n","import axios from 'axios';\n\nconst API_KEY = '37244e55abf3f6dfeaa909abea58e77f';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst params = {\n  api_key: API_KEY,\n};\n\nexport async function fetchMoviesNet() {\n  try {\n    const response = await axios.get('trending/all/day', { params });\n    return response.data.results;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function fetchMovieDetails(movieId) {\n  try {\n    const response = await axios.get(`movie/${movieId}`, { params });\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function fetchMovieCast(movieId) {\n  try {\n    const response = await axios.get(`movie/${movieId}/credits`, { params });\n    return response.data.cast;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function fetchMovieReviews(movieId) {\n  try {\n    const response = await axios.get(`movie/${movieId}/reviews`, { params });\n    return response.data.results;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function fetchSearchedMovie(query) {\n  const params = {\n    api_key: API_KEY,\n    query: query,\n  };\n\n  try {\n    const response = await axios.get('search/movie?', { params });\n    return response.data.results;\n  } catch (error) {\n    throw error;\n  }\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"MovieDetailsBox\":\"Pages_MovieDetailsBox__Fbcl0\",\"MovieDetailsImg\":\"Pages_MovieDetailsImg__kf-WO\",\"addInfBox\":\"Pages_addInfBox__-BKtL\",\"buttonBox\":\"Pages_buttonBox__2ISTv\",\"formWrap\":\"Pages_formWrap__Wpc8Q\",\"searchBtn\":\"Pages_searchBtn__dxFm1\",\"searchBox\":\"Pages_searchBox__WDKV1\",\"MovieReviewsBox\":\"Pages_MovieReviewsBox__AyV32\"};"],"names":["toastConfig","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","theme","title","poster","year","movieId","location","useLocation","className","styles","to","state","from","src","placeholder","alt","width","dayMovies","map","movie","id","name","poster_path","first_air_date","release_date","useSearchParams","searchParams","setSearchParams","searchMovie","get","useState","searchMovies","setSearchMovies","isLoading","setIsLoading","error","setError","useEffect","fetchPostsData","fetchSearchedMovie","movies","console","log","length","toast","message","onSubmit","event","preventDefault","searchValue","target","value","trim","toLowerCase","query","type","autoComplete","autoFocus","required","visible","height","ariaLabel","wrapperStyle","wrapperClassName","API_KEY","axios","params","api_key","fetchMoviesNet","response","data","results","fetchMovieDetails","fetchMovieCast","cast","fetchMovieReviews"],"sourceRoot":""}