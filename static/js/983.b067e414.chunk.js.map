{"version":3,"file":"static/js/983.b067e414.chunk.js","mappings":"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","sources":["components/Loader/toastConfig.js","webpack://react-homework-template/./src/components/MoviesNetItem/MoviesNetItem.module.css?1398","components/MoviesNetItem/MoviesNetItem.js","webpack://react-homework-template/./src/components/MoviesNet/MoviesNet.module.css?7565","components/MoviesNet/MoviesNet.js","pages/HomePage.jsx","services/api/api.js"],"sourcesContent":["export const toastConfig = {\n    position: 'top-center',\n    autoClose: 2000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n    progress: undefined,\n    theme: 'colored',\n  };","// extracted by mini-css-extract-plugin\nexport default {\"MoviesNetItem\":\"MoviesNetItem_MoviesNetItem__RcVDF\"};","import React from 'react';\nimport styles from './MoviesNetItem.module.css';\nimport { Link, useLocation } from 'react-router-dom';\n\nimport placeholder from '../../images/cinema.png';\n\nconst MoviesNetItem = ({ title, poster, year, movieId }) => {\n  const location = useLocation();\n\n  return (\n    <li className={styles.MoviesNetItem}>\n      <Link to={`/movies/${movieId}`}    state={{ from: location }}>\n      <img\n    \n       src={poster ? `https://image.tmdb.org/t/p/w200/${poster}` : placeholder}\n        alt={title}\n        width=\"275\"\n      />\n      <h3>{title}</h3>\n      <p>Year: {year}</p>\n      </Link>\n    </li>\n  );\n};\n\nexport default MoviesNetItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"MoviesNetList\":\"MoviesNet_MoviesNetList__RlGIx\"};","import React from 'react';\nimport MoviesNetItem from '../MoviesNetItem/MoviesNetItem';\nimport styles from './MoviesNet.module.css';\n\nconst MoviesNet = ({ dayMovies }) => {\n  return (\n    <ul className={styles.MoviesNetList}>\n      {dayMovies.map( ({id, title, name, poster_path, first_air_date, release_date}) => (\n        <MoviesNetItem\n          key={id}\n          movieId={id}\n          title={title ? title : name}\n          poster={poster_path}\n          year={first_air_date ? first_air_date : release_date}\n        />\n      ))}\n    </ul>\n  );\n};\n\nexport default MoviesNet;\n","import React, { useState, useEffect } from 'react';\nimport { Dna } from 'react-loader-spinner';\nimport { toast } from 'react-toastify';\nimport { fetchMoviesNet } from '../services/api/api';\nimport { toastConfig } from '../components/Loader/toastConfig';\n\nimport MoviesNet from '../components/MoviesNet/MoviesNet';\n\nconst HomePage = () => {\n  const [dayMovies, setDayMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchMoviesData = async () => {\n      try {\n        const movies = await fetchMoviesNet();\n\n        setDayMovies(movies);\n      } catch (error) {\n        toast.error(error.message, toastConfig);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchMoviesData();\n  }, []);\n\n  return (\n    <div>\n      {isLoading && (\n        <Dna\n          visible={true}\n          height={80}\n          width={80}\n          ariaLabel=\"dna-loading\"\n          wrapperStyle={{}}\n          wrapperClassName=\"dna-wrapper\"\n        />\n      )}\n\n      <MoviesNet dayMovies={dayMovies} />\n    </div>\n  );\n};\n\nexport default HomePage;\n","import axios from 'axios';\n\nconst API_KEY = '37244e55abf3f6dfeaa909abea58e77f';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst params = {\n  api_key: API_KEY,\n};\n\nexport async function fetchMoviesNet() {\n  try {\n    const response = await axios.get('trending/all/day', { params });\n    return response.data.results;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function fetchMovieDetails(movieId) {\n  try {\n    const response = await axios.get(`movie/${movieId}`, { params });\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function fetchMovieCast(movieId) {\n  try {\n    const response = await axios.get(`movie/${movieId}/credits`, { params });\n    return response.data.cast;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function fetchMovieReviews(movieId) {\n  try {\n    const response = await axios.get(`movie/${movieId}/reviews`, { params });\n    return response.data.results;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function fetchSearchedMovie(query) {\n  const params = {\n    api_key: API_KEY,\n    query: query,\n  };\n\n  try {\n    const response = await axios.get('search/movie?', { params });\n    return response.data.results;\n  } catch (error) {\n    throw error;\n  }\n}\n"],"names":["toastConfig","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","theme","title","poster","year","movieId","location","useLocation","className","styles","to","state","from","src","placeholder","alt","width","dayMovies","map","id","name","poster_path","first_air_date","release_date","useState","setDayMovies","isLoading","setIsLoading","useEffect","fetchMoviesData","fetchMoviesNet","movies","toast","message","visible","height","ariaLabel","wrapperStyle","wrapperClassName","API_KEY","axios","params","api_key","response","data","results","fetchMovieDetails","fetchMovieCast","cast","fetchMovieReviews","fetchSearchedMovie","query"],"sourceRoot":""}